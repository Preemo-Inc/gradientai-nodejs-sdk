/* tslint:disable */
/* eslint-disable */
/**
 * Gradient AI API
 * Interface for interacting with Gradient AI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gradient.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BaseModel
 */
export interface BaseModel {
    /**
     * 
     * @type {string}
     * @memberof BaseModel
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BaseModel
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BaseModel
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof BaseModel
     */
    'type': BaseModelTypeEnum;
}

export const BaseModelTypeEnum = {
    BaseModel: 'baseModel'
} as const;

export type BaseModelTypeEnum = typeof BaseModelTypeEnum[keyof typeof BaseModelTypeEnum];

/**
 * 
 * @export
 * @interface CompleteModelBodyParams
 */
export interface CompleteModelBodyParams {
    /**
     * 
     * @type {CompleteModelBodyParamsGuidance}
     * @memberof CompleteModelBodyParams
     */
    'guidance'?: CompleteModelBodyParamsGuidance | null;
    /**
     * The maximum number of tokens to generate.
     * @type {number}
     * @memberof CompleteModelBodyParams
     */
    'maxGeneratedTokenCount'?: number | null;
    /**
     * The prompt string you are providing the model, to which the model will generate a completion in response.
     * @type {string}
     * @memberof CompleteModelBodyParams
     */
    'query': string;
    /**
     * This parameter adjusts the degree of randomness in generation. Higher temperature results in more diverse generations.
     * @type {number}
     * @memberof CompleteModelBodyParams
     */
    'temperature'?: number | null;
    /**
     * This parameter ensures that only the top k most likely tokens are considered for generation at each step.
     * @type {number}
     * @memberof CompleteModelBodyParams
     */
    'topK'?: number | null;
    /**
     * This parameter ensures that only the most likely tokens, with total probability mass of p, are considered for generation at each step. If topK is also enabled, topP acts after topK.
     * @type {number}
     * @memberof CompleteModelBodyParams
     */
    'topP'?: number | null;
}
/**
 * 
 * @export
 * @interface CompleteModelBodyParamsGuidance
 */
export interface CompleteModelBodyParamsGuidance {
    /**
     * 
     * @type {string}
     * @memberof CompleteModelBodyParamsGuidance
     */
    'type': CompleteModelBodyParamsGuidanceTypeEnum;
    /**
     * The set of possible values that should be generated by the model
     * @type {Array<string>}
     * @memberof CompleteModelBodyParamsGuidance
     */
    'value': Array<string>;
}

export const CompleteModelBodyParamsGuidanceTypeEnum = {
    Choice: 'choice'
} as const;

export type CompleteModelBodyParamsGuidanceTypeEnum = typeof CompleteModelBodyParamsGuidanceTypeEnum[keyof typeof CompleteModelBodyParamsGuidanceTypeEnum];

/**
 * @type CompleteModelError
 * @export
 */
export type CompleteModelError = CompleteModelErrorOneOf | CompleteModelErrorOneOf1 | CompleteModelErrorOneOf2 | CompleteModelErrorOneOf3 | CompleteModelErrorOneOf4 | CompleteModelErrorOneOf5;

/**
 * 
 * @export
 * @interface CompleteModelErrorOneOf
 */
export interface CompleteModelErrorOneOf {
    /**
     * 
     * @type {string}
     * @memberof CompleteModelErrorOneOf
     */
    'message': string;
    /**
     * 
     * @type {CompleteModelErrorOneOfPayload}
     * @memberof CompleteModelErrorOneOf
     */
    'payload': CompleteModelErrorOneOfPayload;
    /**
     * 
     * @type {string}
     * @memberof CompleteModelErrorOneOf
     */
    'type': CompleteModelErrorOneOfTypeEnum;
}

export const CompleteModelErrorOneOfTypeEnum = {
    FlaggedContent: 'flaggedContent',
    BodyParsingError: 'bodyParsingError',
    QueryOrPathParsingError: 'queryOrPathParsingError',
    UnknownBaseModel: 'unknownBaseModel',
    UnknownModelAdapter: 'unknownModelAdapter',
    UnprocessableContent: 'unprocessableContent'
} as const;

export type CompleteModelErrorOneOfTypeEnum = typeof CompleteModelErrorOneOfTypeEnum[keyof typeof CompleteModelErrorOneOfTypeEnum];

/**
 * 
 * @export
 * @interface CompleteModelErrorOneOf1
 */
export interface CompleteModelErrorOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof CompleteModelErrorOneOf1
     */
    'message': string;
    /**
     * 
     * @type {CompleteModelErrorOneOf1Payload}
     * @memberof CompleteModelErrorOneOf1
     */
    'payload': CompleteModelErrorOneOf1Payload;
    /**
     * 
     * @type {string}
     * @memberof CompleteModelErrorOneOf1
     */
    'type': CompleteModelErrorOneOf1TypeEnum;
}

export const CompleteModelErrorOneOf1TypeEnum = {
    BodyParsingError: 'bodyParsingError',
    FlaggedContent: 'flaggedContent',
    QueryOrPathParsingError: 'queryOrPathParsingError',
    UnknownBaseModel: 'unknownBaseModel',
    UnknownModelAdapter: 'unknownModelAdapter',
    UnprocessableContent: 'unprocessableContent',
    NanLoss: 'nanLoss'
} as const;

export type CompleteModelErrorOneOf1TypeEnum = typeof CompleteModelErrorOneOf1TypeEnum[keyof typeof CompleteModelErrorOneOf1TypeEnum];

/**
 * 
 * @export
 * @interface CompleteModelErrorOneOf1Payload
 */
export interface CompleteModelErrorOneOf1Payload {
    /**
     * 
     * @type {any}
     * @memberof CompleteModelErrorOneOf1Payload
     */
    'formattedValidationError'?: any | null;
    /**
     * 
     * @type {any}
     * @memberof CompleteModelErrorOneOf1Payload
     */
    'validationError'?: any;
}
/**
 * 
 * @export
 * @interface CompleteModelErrorOneOf2
 */
export interface CompleteModelErrorOneOf2 {
    /**
     * 
     * @type {string}
     * @memberof CompleteModelErrorOneOf2
     */
    'message': string;
    /**
     * 
     * @type {CompleteModelErrorOneOf1Payload}
     * @memberof CompleteModelErrorOneOf2
     */
    'payload': CompleteModelErrorOneOf1Payload;
    /**
     * 
     * @type {string}
     * @memberof CompleteModelErrorOneOf2
     */
    'type': CompleteModelErrorOneOf2TypeEnum;
}

export const CompleteModelErrorOneOf2TypeEnum = {
    QueryOrPathParsingError: 'queryOrPathParsingError'
} as const;

export type CompleteModelErrorOneOf2TypeEnum = typeof CompleteModelErrorOneOf2TypeEnum[keyof typeof CompleteModelErrorOneOf2TypeEnum];

/**
 * 
 * @export
 * @interface CompleteModelErrorOneOf3
 */
export interface CompleteModelErrorOneOf3 {
    /**
     * 
     * @type {string}
     * @memberof CompleteModelErrorOneOf3
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof CompleteModelErrorOneOf3
     */
    'type': CompleteModelErrorOneOf3TypeEnum;
}

export const CompleteModelErrorOneOf3TypeEnum = {
    UnknownBaseModel: 'unknownBaseModel'
} as const;

export type CompleteModelErrorOneOf3TypeEnum = typeof CompleteModelErrorOneOf3TypeEnum[keyof typeof CompleteModelErrorOneOf3TypeEnum];

/**
 * 
 * @export
 * @interface CompleteModelErrorOneOf4
 */
export interface CompleteModelErrorOneOf4 {
    /**
     * 
     * @type {string}
     * @memberof CompleteModelErrorOneOf4
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof CompleteModelErrorOneOf4
     */
    'type': CompleteModelErrorOneOf4TypeEnum;
}

export const CompleteModelErrorOneOf4TypeEnum = {
    UnknownModelAdapter: 'unknownModelAdapter'
} as const;

export type CompleteModelErrorOneOf4TypeEnum = typeof CompleteModelErrorOneOf4TypeEnum[keyof typeof CompleteModelErrorOneOf4TypeEnum];

/**
 * 
 * @export
 * @interface CompleteModelErrorOneOf5
 */
export interface CompleteModelErrorOneOf5 {
    /**
     * 
     * @type {string}
     * @memberof CompleteModelErrorOneOf5
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof CompleteModelErrorOneOf5
     */
    'type': CompleteModelErrorOneOf5TypeEnum;
}

export const CompleteModelErrorOneOf5TypeEnum = {
    UnprocessableContent: 'unprocessableContent'
} as const;

export type CompleteModelErrorOneOf5TypeEnum = typeof CompleteModelErrorOneOf5TypeEnum[keyof typeof CompleteModelErrorOneOf5TypeEnum];

/**
 * 
 * @export
 * @interface CompleteModelErrorOneOfPayload
 */
export interface CompleteModelErrorOneOfPayload {
    /**
     * 
     * @type {Array<CompleteModelErrorOneOfPayloadFlaggedContentInner>}
     * @memberof CompleteModelErrorOneOfPayload
     */
    'flaggedContent': Array<CompleteModelErrorOneOfPayloadFlaggedContentInner>;
}
/**
 * 
 * @export
 * @interface CompleteModelErrorOneOfPayloadFlaggedContentInner
 */
export interface CompleteModelErrorOneOfPayloadFlaggedContentInner {
    /**
     * 
     * @type {string}
     * @memberof CompleteModelErrorOneOfPayloadFlaggedContentInner
     */
    'sample': string;
}
/**
 * 
 * @export
 * @interface CompleteModelSuccess
 */
export interface CompleteModelSuccess {
    /**
     * 
     * @type {string}
     * @memberof CompleteModelSuccess
     */
    'finishReason': string;
    /**
     * 
     * @type {string}
     * @memberof CompleteModelSuccess
     */
    'generatedOutput': string;
}
/**
 * 
 * @export
 * @interface CreateModelBodyParams
 */
export interface CreateModelBodyParams {
    /**
     * 
     * @type {CreateModelBodyParamsInitialHyperparameters}
     * @memberof CreateModelBodyParams
     */
    'initialHyperparameters'?: CreateModelBodyParamsInitialHyperparameters | null;
    /**
     * 
     * @type {CreateModelBodyParamsModel}
     * @memberof CreateModelBodyParams
     */
    'model': CreateModelBodyParamsModel;
}
/**
 * 
 * @export
 * @interface CreateModelBodyParamsInitialHyperparameters
 */
export interface CreateModelBodyParamsInitialHyperparameters {
    /**
     * 
     * @type {CreateModelBodyParamsInitialHyperparametersLoraHyperparameters}
     * @memberof CreateModelBodyParamsInitialHyperparameters
     */
    'loraHyperparameters'?: CreateModelBodyParamsInitialHyperparametersLoraHyperparameters | null;
    /**
     * 
     * @type {CreateModelBodyParamsInitialHyperparametersTrainingArguments}
     * @memberof CreateModelBodyParamsInitialHyperparameters
     */
    'trainingArguments'?: CreateModelBodyParamsInitialHyperparametersTrainingArguments | null;
}
/**
 * 
 * @export
 * @interface CreateModelBodyParamsInitialHyperparametersLoraHyperparameters
 */
export interface CreateModelBodyParamsInitialHyperparametersLoraHyperparameters {
    /**
     * 
     * @type {number}
     * @memberof CreateModelBodyParamsInitialHyperparametersLoraHyperparameters
     */
    'rank'?: number | null;
}
/**
 * 
 * @export
 * @interface CreateModelBodyParamsInitialHyperparametersTrainingArguments
 */
export interface CreateModelBodyParamsInitialHyperparametersTrainingArguments {
    /**
     * 
     * @type {number}
     * @memberof CreateModelBodyParamsInitialHyperparametersTrainingArguments
     */
    'learningRate'?: number | null;
}
/**
 * 
 * @export
 * @interface CreateModelBodyParamsModel
 */
export interface CreateModelBodyParamsModel {
    /**
     * The foundational model you are creating a new instance of for fine-tuning.
     * @type {string}
     * @memberof CreateModelBodyParamsModel
     */
    'baseModelId': string;
    /**
     * What your new fine-tuned model will be called.
     * @type {string}
     * @memberof CreateModelBodyParamsModel
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateModelError
 */
export interface CreateModelError {
    /**
     * 
     * @type {string}
     * @memberof CreateModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface CreateModelSuccess
 */
export interface CreateModelSuccess {
    /**
     * 
     * @type {string}
     * @memberof CreateModelSuccess
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface DeleteModelError
 */
export interface DeleteModelError {
    /**
     * 
     * @type {string}
     * @memberof DeleteModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface FineTuneModelBodyParams
 */
export interface FineTuneModelBodyParams {
    /**
     * 
     * @type {Array<FineTuneModelBodyParamsSamplesInner>}
     * @memberof FineTuneModelBodyParams
     */
    'samples': Array<FineTuneModelBodyParamsSamplesInner>;
}
/**
 * 
 * @export
 * @interface FineTuneModelBodyParamsSamplesInner
 */
export interface FineTuneModelBodyParamsSamplesInner {
    /**
     * 
     * @type {FineTuneModelBodyParamsSamplesInnerFineTuningParameters}
     * @memberof FineTuneModelBodyParamsSamplesInner
     */
    'fineTuningParameters'?: FineTuneModelBodyParamsSamplesInnerFineTuningParameters | null;
    /**
     * 
     * @type {FineTuneModelBodyParamsSamplesInnerInputs}
     * @memberof FineTuneModelBodyParamsSamplesInner
     */
    'inputs': FineTuneModelBodyParamsSamplesInnerInputs;
}
/**
 * 
 * @export
 * @interface FineTuneModelBodyParamsSamplesInnerFineTuningParameters
 */
export interface FineTuneModelBodyParamsSamplesInnerFineTuningParameters {
    /**
     * 
     * @type {number}
     * @memberof FineTuneModelBodyParamsSamplesInnerFineTuningParameters
     */
    'multiplier'?: number | null;
}
/**
 * 
 * @export
 * @interface FineTuneModelBodyParamsSamplesInnerInputs
 */
export interface FineTuneModelBodyParamsSamplesInnerInputs {
}
/**
 * 
 * @export
 * @interface FineTuneModelBodyParamsSamplesInnerInputsAnyOfInner
 */
export interface FineTuneModelBodyParamsSamplesInnerInputsAnyOfInner {
    /**
     * 
     * @type {boolean}
     * @memberof FineTuneModelBodyParamsSamplesInnerInputsAnyOfInner
     */
    'parseSpecialTokens'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FineTuneModelBodyParamsSamplesInnerInputsAnyOfInner
     */
    'trainable'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FineTuneModelBodyParamsSamplesInnerInputsAnyOfInner
     */
    'value': string;
}
/**
 * @type FineTuneModelError
 * @export
 */
export type FineTuneModelError = CompleteModelErrorOneOf | CompleteModelErrorOneOf1 | CompleteModelErrorOneOf2 | CompleteModelErrorOneOf4 | CompleteModelErrorOneOf5 | FineTuneModelErrorOneOf;

/**
 * 
 * @export
 * @interface FineTuneModelErrorOneOf
 */
export interface FineTuneModelErrorOneOf {
    /**
     * 
     * @type {string}
     * @memberof FineTuneModelErrorOneOf
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof FineTuneModelErrorOneOf
     */
    'type': FineTuneModelErrorOneOfTypeEnum;
}

export const FineTuneModelErrorOneOfTypeEnum = {
    NanLoss: 'nanLoss'
} as const;

export type FineTuneModelErrorOneOfTypeEnum = typeof FineTuneModelErrorOneOfTypeEnum[keyof typeof FineTuneModelErrorOneOfTypeEnum];

/**
 * 
 * @export
 * @interface FineTuneModelSuccess
 */
export interface FineTuneModelSuccess {
    /**
     * 
     * @type {number}
     * @memberof FineTuneModelSuccess
     */
    'numberOfTrainableTokens': number;
    /**
     * 
     * @type {number}
     * @memberof FineTuneModelSuccess
     */
    'sumLoss': number;
}
/**
 * 
 * @export
 * @interface GenerateEmbeddingBodyParams
 */
export interface GenerateEmbeddingBodyParams {
    /**
     * 
     * @type {Array<GenerateEmbeddingBodyParamsInputsInner>}
     * @memberof GenerateEmbeddingBodyParams
     */
    'inputs': Array<GenerateEmbeddingBodyParamsInputsInner>;
}
/**
 * 
 * @export
 * @interface GenerateEmbeddingBodyParamsInputsInner
 */
export interface GenerateEmbeddingBodyParamsInputsInner {
    /**
     * 
     * @type {string}
     * @memberof GenerateEmbeddingBodyParamsInputsInner
     */
    'input': string;
}
/**
 * 
 * @export
 * @interface GenerateEmbeddingError
 */
export interface GenerateEmbeddingError {
    /**
     * 
     * @type {string}
     * @memberof GenerateEmbeddingError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface GenerateEmbeddingSuccess
 */
export interface GenerateEmbeddingSuccess {
    /**
     * 
     * @type {Array<GenerateEmbeddingSuccessEmbeddingsInner>}
     * @memberof GenerateEmbeddingSuccess
     */
    'embeddings': Array<GenerateEmbeddingSuccessEmbeddingsInner>;
}
/**
 * 
 * @export
 * @interface GenerateEmbeddingSuccessEmbeddingsInner
 */
export interface GenerateEmbeddingSuccessEmbeddingsInner {
    /**
     * 
     * @type {Array<number>}
     * @memberof GenerateEmbeddingSuccessEmbeddingsInner
     */
    'embedding': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof GenerateEmbeddingSuccessEmbeddingsInner
     */
    'index': number;
}
/**
 * 
 * @export
 * @interface GetModelError
 */
export interface GetModelError {
    /**
     * 
     * @type {string}
     * @memberof GetModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface GetModelSuccess
 */
export interface GetModelSuccess {
    /**
     * 
     * @type {string}
     * @memberof GetModelSuccess
     */
    'baseModelId': string;
    /**
     * 
     * @type {string}
     * @memberof GetModelSuccess
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetModelSuccess
     */
    'latestUpdateTime': string;
    /**
     * 
     * @type {string}
     * @memberof GetModelSuccess
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetModelSuccess
     */
    'type': GetModelSuccessTypeEnum;
}

export const GetModelSuccessTypeEnum = {
    ModelAdapter: 'modelAdapter'
} as const;

export type GetModelSuccessTypeEnum = typeof GetModelSuccessTypeEnum[keyof typeof GetModelSuccessTypeEnum];

/**
 * 
 * @export
 * @interface ListEmbeddingsError
 */
export interface ListEmbeddingsError {
    /**
     * 
     * @type {string}
     * @memberof ListEmbeddingsError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ListEmbeddingsSuccess
 */
export interface ListEmbeddingsSuccess {
    /**
     * 
     * @type {Array<ListEmbeddingsSuccessEmbeddingsModelsInner>}
     * @memberof ListEmbeddingsSuccess
     */
    'embeddingsModels': Array<ListEmbeddingsSuccessEmbeddingsModelsInner>;
}
/**
 * 
 * @export
 * @interface ListEmbeddingsSuccessEmbeddingsModelsInner
 */
export interface ListEmbeddingsSuccessEmbeddingsModelsInner {
    /**
     * 
     * @type {string}
     * @memberof ListEmbeddingsSuccessEmbeddingsModelsInner
     */
    'slug': ListEmbeddingsSuccessEmbeddingsModelsInnerSlugEnum;
}

export const ListEmbeddingsSuccessEmbeddingsModelsInnerSlugEnum = {
    BgeLarge: 'bge-large'
} as const;

export type ListEmbeddingsSuccessEmbeddingsModelsInnerSlugEnum = typeof ListEmbeddingsSuccessEmbeddingsModelsInnerSlugEnum[keyof typeof ListEmbeddingsSuccessEmbeddingsModelsInnerSlugEnum];

/**
 * 
 * @export
 * @interface ListModelsError
 */
export interface ListModelsError {
    /**
     * 
     * @type {string}
     * @memberof ListModelsError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ListModelsSuccess
 */
export interface ListModelsSuccess {
    /**
     * 
     * @type {Array<ListModelsSuccessModelsInner>}
     * @memberof ListModelsSuccess
     */
    'models': Array<ListModelsSuccessModelsInner>;
}
/**
 * @type ListModelsSuccessModelsInner
 * @export
 */
export type ListModelsSuccessModelsInner = BaseModel | ModelAdapter;

/**
 * 
 * @export
 * @interface ModelAdapter
 */
export interface ModelAdapter {
    /**
     * 
     * @type {string}
     * @memberof ModelAdapter
     */
    'baseModelId': string;
    /**
     * 
     * @type {string}
     * @memberof ModelAdapter
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ModelAdapter
     */
    'latestUpdateTime': string;
    /**
     * 
     * @type {string}
     * @memberof ModelAdapter
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ModelAdapter
     */
    'type': ModelAdapterTypeEnum;
}

export const ModelAdapterTypeEnum = {
    ModelAdapter: 'modelAdapter'
} as const;

export type ModelAdapterTypeEnum = typeof ModelAdapterTypeEnum[keyof typeof ModelAdapterTypeEnum];


/**
 * EmbeddingsApi - axios parameter creator
 * @export
 */
export const EmbeddingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generates embeddings with the given embeddings model.
         * @summary Generate embeddings
         * @param {GenerateEmbeddingSlugEnum} slug 
         * @param {string} xGradientWorkspaceId 
         * @param {GenerateEmbeddingBodyParams} generateEmbeddingBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateEmbedding: async (slug: GenerateEmbeddingSlugEnum, xGradientWorkspaceId: string, generateEmbeddingBodyParams: GenerateEmbeddingBodyParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('generateEmbedding', 'slug', slug)
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            assertParamExists('generateEmbedding', 'xGradientWorkspaceId', xGradientWorkspaceId)
            // verify required parameter 'generateEmbeddingBodyParams' is not null or undefined
            assertParamExists('generateEmbedding', 'generateEmbeddingBodyParams', generateEmbeddingBodyParams)
            const localVarPath = `/embeddings/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generateEmbeddingBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the currently available embeddings models and provides basic information, such as the slug.
         * @summary List available embeddings models
         * @param {string} xGradientWorkspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmbeddings: async (xGradientWorkspaceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            assertParamExists('listEmbeddings', 'xGradientWorkspaceId', xGradientWorkspaceId)
            const localVarPath = `/embeddings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmbeddingsApi - functional programming interface
 * @export
 */
export const EmbeddingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmbeddingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Generates embeddings with the given embeddings model.
         * @summary Generate embeddings
         * @param {GenerateEmbeddingSlugEnum} slug 
         * @param {string} xGradientWorkspaceId 
         * @param {GenerateEmbeddingBodyParams} generateEmbeddingBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateEmbedding(slug: GenerateEmbeddingSlugEnum, xGradientWorkspaceId: string, generateEmbeddingBodyParams: GenerateEmbeddingBodyParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateEmbeddingSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateEmbedding(slug, xGradientWorkspaceId, generateEmbeddingBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the currently available embeddings models and provides basic information, such as the slug.
         * @summary List available embeddings models
         * @param {string} xGradientWorkspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmbeddings(xGradientWorkspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEmbeddingsSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmbeddings(xGradientWorkspaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmbeddingsApi - factory interface
 * @export
 */
export const EmbeddingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmbeddingsApiFp(configuration)
    return {
        /**
         * Generates embeddings with the given embeddings model.
         * @summary Generate embeddings
         * @param {EmbeddingsApiGenerateEmbeddingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateEmbedding(requestParameters: EmbeddingsApiGenerateEmbeddingRequest, options?: AxiosRequestConfig): AxiosPromise<GenerateEmbeddingSuccess> {
            return localVarFp.generateEmbedding(requestParameters.slug, requestParameters.xGradientWorkspaceId, requestParameters.generateEmbeddingBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the currently available embeddings models and provides basic information, such as the slug.
         * @summary List available embeddings models
         * @param {EmbeddingsApiListEmbeddingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmbeddings(requestParameters: EmbeddingsApiListEmbeddingsRequest, options?: AxiosRequestConfig): AxiosPromise<ListEmbeddingsSuccess> {
            return localVarFp.listEmbeddings(requestParameters.xGradientWorkspaceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateEmbedding operation in EmbeddingsApi.
 * @export
 * @interface EmbeddingsApiGenerateEmbeddingRequest
 */
export interface EmbeddingsApiGenerateEmbeddingRequest {
    /**
     * 
     * @type {'bge-large'}
     * @memberof EmbeddingsApiGenerateEmbedding
     */
    readonly slug: GenerateEmbeddingSlugEnum

    /**
     * 
     * @type {string}
     * @memberof EmbeddingsApiGenerateEmbedding
     */
    readonly xGradientWorkspaceId: string

    /**
     * 
     * @type {GenerateEmbeddingBodyParams}
     * @memberof EmbeddingsApiGenerateEmbedding
     */
    readonly generateEmbeddingBodyParams: GenerateEmbeddingBodyParams
}

/**
 * Request parameters for listEmbeddings operation in EmbeddingsApi.
 * @export
 * @interface EmbeddingsApiListEmbeddingsRequest
 */
export interface EmbeddingsApiListEmbeddingsRequest {
    /**
     * 
     * @type {string}
     * @memberof EmbeddingsApiListEmbeddings
     */
    readonly xGradientWorkspaceId: string
}

/**
 * EmbeddingsApi - object-oriented interface
 * @export
 * @class EmbeddingsApi
 * @extends {BaseAPI}
 */
export class EmbeddingsApi extends BaseAPI {
    /**
     * Generates embeddings with the given embeddings model.
     * @summary Generate embeddings
     * @param {EmbeddingsApiGenerateEmbeddingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddingsApi
     */
    public generateEmbedding(requestParameters: EmbeddingsApiGenerateEmbeddingRequest, options?: AxiosRequestConfig) {
        return EmbeddingsApiFp(this.configuration).generateEmbedding(requestParameters.slug, requestParameters.xGradientWorkspaceId, requestParameters.generateEmbeddingBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the currently available embeddings models and provides basic information, such as the slug.
     * @summary List available embeddings models
     * @param {EmbeddingsApiListEmbeddingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddingsApi
     */
    public listEmbeddings(requestParameters: EmbeddingsApiListEmbeddingsRequest, options?: AxiosRequestConfig) {
        return EmbeddingsApiFp(this.configuration).listEmbeddings(requestParameters.xGradientWorkspaceId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GenerateEmbeddingSlugEnum = {
    BgeLarge: 'bge-large'
} as const;
export type GenerateEmbeddingSlugEnum = typeof GenerateEmbeddingSlugEnum[keyof typeof GenerateEmbeddingSlugEnum];


/**
 * ModelsApi - axios parameter creator
 * @export
 */
export const ModelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Completes your fine-tuned model with the specified prompt string. The model will generate a completion.
         * @summary Complete model
         * @param {string} id 
         * @param {string} xGradientWorkspaceId 
         * @param {CompleteModelBodyParams} completeModelBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeModel: async (id: string, xGradientWorkspaceId: string, completeModelBodyParams: CompleteModelBodyParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('completeModel', 'id', id)
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            assertParamExists('completeModel', 'xGradientWorkspaceId', xGradientWorkspaceId)
            // verify required parameter 'completeModelBodyParams' is not null or undefined
            assertParamExists('completeModel', 'completeModelBodyParams', completeModelBodyParams)
            const localVarPath = `/models/{id}/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(completeModelBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new instance of a model based on a specified model from the existing list.
         * @summary Create model
         * @param {string} xGradientWorkspaceId 
         * @param {CreateModelBodyParams} createModelBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel: async (xGradientWorkspaceId: string, createModelBodyParams: CreateModelBodyParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            assertParamExists('createModel', 'xGradientWorkspaceId', xGradientWorkspaceId)
            // verify required parameter 'createModelBodyParams' is not null or undefined
            assertParamExists('createModel', 'createModelBodyParams', createModelBodyParams)
            const localVarPath = `/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createModelBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the fine-tuned model.
         * @summary Delete model
         * @param {string} id 
         * @param {string} xGradientWorkspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel: async (id: string, xGradientWorkspaceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteModel', 'id', id)
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            assertParamExists('deleteModel', 'xGradientWorkspaceId', xGradientWorkspaceId)
            const localVarPath = `/models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fine-tunes the specified model with your data samples.
         * @summary Fine-tune model
         * @param {string} id 
         * @param {string} xGradientWorkspaceId 
         * @param {FineTuneModelBodyParams} fineTuneModelBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineTuneModel: async (id: string, xGradientWorkspaceId: string, fineTuneModelBodyParams: FineTuneModelBodyParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineTuneModel', 'id', id)
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            assertParamExists('fineTuneModel', 'xGradientWorkspaceId', xGradientWorkspaceId)
            // verify required parameter 'fineTuneModelBodyParams' is not null or undefined
            assertParamExists('fineTuneModel', 'fineTuneModelBodyParams', fineTuneModelBodyParams)
            const localVarPath = `/models/{id}/fine-tune`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fineTuneModelBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Describes the specified model, including the model ID, name, and base model ID.
         * @summary Describe model
         * @param {string} id 
         * @param {string} xGradientWorkspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel: async (id: string, xGradientWorkspaceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getModel', 'id', id)
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            assertParamExists('getModel', 'xGradientWorkspaceId', xGradientWorkspaceId)
            const localVarPath = `/models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the currently available models in the selected workspace and provides basic information, such as the model name, ID and whether it is a base or fine-tuned model.
         * @summary List available models
         * @param {string} xGradientWorkspaceId 
         * @param {boolean | null} [onlyBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels: async (xGradientWorkspaceId: string, onlyBase?: boolean | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            assertParamExists('listModels', 'xGradientWorkspaceId', xGradientWorkspaceId)
            const localVarPath = `/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (onlyBase !== undefined) {
                localVarQueryParameter['onlyBase'] = onlyBase;
            }

            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelsApi - functional programming interface
 * @export
 */
export const ModelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelsApiAxiosParamCreator(configuration)
    return {
        /**
         * Completes your fine-tuned model with the specified prompt string. The model will generate a completion.
         * @summary Complete model
         * @param {string} id 
         * @param {string} xGradientWorkspaceId 
         * @param {CompleteModelBodyParams} completeModelBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeModel(id: string, xGradientWorkspaceId: string, completeModelBodyParams: CompleteModelBodyParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteModelSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeModel(id, xGradientWorkspaceId, completeModelBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new instance of a model based on a specified model from the existing list.
         * @summary Create model
         * @param {string} xGradientWorkspaceId 
         * @param {CreateModelBodyParams} createModelBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModel(xGradientWorkspaceId: string, createModelBodyParams: CreateModelBodyParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateModelSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createModel(xGradientWorkspaceId, createModelBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the fine-tuned model.
         * @summary Delete model
         * @param {string} id 
         * @param {string} xGradientWorkspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModel(id: string, xGradientWorkspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModel(id, xGradientWorkspaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fine-tunes the specified model with your data samples.
         * @summary Fine-tune model
         * @param {string} id 
         * @param {string} xGradientWorkspaceId 
         * @param {FineTuneModelBodyParams} fineTuneModelBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineTuneModel(id: string, xGradientWorkspaceId: string, fineTuneModelBodyParams: FineTuneModelBodyParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FineTuneModelSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineTuneModel(id, xGradientWorkspaceId, fineTuneModelBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Describes the specified model, including the model ID, name, and base model ID.
         * @summary Describe model
         * @param {string} id 
         * @param {string} xGradientWorkspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModel(id: string, xGradientWorkspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetModelSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModel(id, xGradientWorkspaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the currently available models in the selected workspace and provides basic information, such as the model name, ID and whether it is a base or fine-tuned model.
         * @summary List available models
         * @param {string} xGradientWorkspaceId 
         * @param {boolean | null} [onlyBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModels(xGradientWorkspaceId: string, onlyBase?: boolean | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListModelsSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModels(xGradientWorkspaceId, onlyBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModelsApi - factory interface
 * @export
 */
export const ModelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelsApiFp(configuration)
    return {
        /**
         * Completes your fine-tuned model with the specified prompt string. The model will generate a completion.
         * @summary Complete model
         * @param {ModelsApiCompleteModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeModel(requestParameters: ModelsApiCompleteModelRequest, options?: AxiosRequestConfig): AxiosPromise<CompleteModelSuccess> {
            return localVarFp.completeModel(requestParameters.id, requestParameters.xGradientWorkspaceId, requestParameters.completeModelBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new instance of a model based on a specified model from the existing list.
         * @summary Create model
         * @param {ModelsApiCreateModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel(requestParameters: ModelsApiCreateModelRequest, options?: AxiosRequestConfig): AxiosPromise<CreateModelSuccess> {
            return localVarFp.createModel(requestParameters.xGradientWorkspaceId, requestParameters.createModelBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the fine-tuned model.
         * @summary Delete model
         * @param {ModelsApiDeleteModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(requestParameters: ModelsApiDeleteModelRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteModel(requestParameters.id, requestParameters.xGradientWorkspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fine-tunes the specified model with your data samples.
         * @summary Fine-tune model
         * @param {ModelsApiFineTuneModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineTuneModel(requestParameters: ModelsApiFineTuneModelRequest, options?: AxiosRequestConfig): AxiosPromise<FineTuneModelSuccess> {
            return localVarFp.fineTuneModel(requestParameters.id, requestParameters.xGradientWorkspaceId, requestParameters.fineTuneModelBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Describes the specified model, including the model ID, name, and base model ID.
         * @summary Describe model
         * @param {ModelsApiGetModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel(requestParameters: ModelsApiGetModelRequest, options?: AxiosRequestConfig): AxiosPromise<GetModelSuccess> {
            return localVarFp.getModel(requestParameters.id, requestParameters.xGradientWorkspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the currently available models in the selected workspace and provides basic information, such as the model name, ID and whether it is a base or fine-tuned model.
         * @summary List available models
         * @param {ModelsApiListModelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels(requestParameters: ModelsApiListModelsRequest, options?: AxiosRequestConfig): AxiosPromise<ListModelsSuccess> {
            return localVarFp.listModels(requestParameters.xGradientWorkspaceId, requestParameters.onlyBase, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for completeModel operation in ModelsApi.
 * @export
 * @interface ModelsApiCompleteModelRequest
 */
export interface ModelsApiCompleteModelRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiCompleteModel
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiCompleteModel
     */
    readonly xGradientWorkspaceId: string

    /**
     * 
     * @type {CompleteModelBodyParams}
     * @memberof ModelsApiCompleteModel
     */
    readonly completeModelBodyParams: CompleteModelBodyParams
}

/**
 * Request parameters for createModel operation in ModelsApi.
 * @export
 * @interface ModelsApiCreateModelRequest
 */
export interface ModelsApiCreateModelRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiCreateModel
     */
    readonly xGradientWorkspaceId: string

    /**
     * 
     * @type {CreateModelBodyParams}
     * @memberof ModelsApiCreateModel
     */
    readonly createModelBodyParams: CreateModelBodyParams
}

/**
 * Request parameters for deleteModel operation in ModelsApi.
 * @export
 * @interface ModelsApiDeleteModelRequest
 */
export interface ModelsApiDeleteModelRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteModel
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteModel
     */
    readonly xGradientWorkspaceId: string
}

/**
 * Request parameters for fineTuneModel operation in ModelsApi.
 * @export
 * @interface ModelsApiFineTuneModelRequest
 */
export interface ModelsApiFineTuneModelRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiFineTuneModel
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiFineTuneModel
     */
    readonly xGradientWorkspaceId: string

    /**
     * 
     * @type {FineTuneModelBodyParams}
     * @memberof ModelsApiFineTuneModel
     */
    readonly fineTuneModelBodyParams: FineTuneModelBodyParams
}

/**
 * Request parameters for getModel operation in ModelsApi.
 * @export
 * @interface ModelsApiGetModelRequest
 */
export interface ModelsApiGetModelRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetModel
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetModel
     */
    readonly xGradientWorkspaceId: string
}

/**
 * Request parameters for listModels operation in ModelsApi.
 * @export
 * @interface ModelsApiListModelsRequest
 */
export interface ModelsApiListModelsRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModels
     */
    readonly xGradientWorkspaceId: string

    /**
     * 
     * @type {boolean}
     * @memberof ModelsApiListModels
     */
    readonly onlyBase?: boolean | null
}

/**
 * ModelsApi - object-oriented interface
 * @export
 * @class ModelsApi
 * @extends {BaseAPI}
 */
export class ModelsApi extends BaseAPI {
    /**
     * Completes your fine-tuned model with the specified prompt string. The model will generate a completion.
     * @summary Complete model
     * @param {ModelsApiCompleteModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public completeModel(requestParameters: ModelsApiCompleteModelRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).completeModel(requestParameters.id, requestParameters.xGradientWorkspaceId, requestParameters.completeModelBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new instance of a model based on a specified model from the existing list.
     * @summary Create model
     * @param {ModelsApiCreateModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public createModel(requestParameters: ModelsApiCreateModelRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).createModel(requestParameters.xGradientWorkspaceId, requestParameters.createModelBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the fine-tuned model.
     * @summary Delete model
     * @param {ModelsApiDeleteModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public deleteModel(requestParameters: ModelsApiDeleteModelRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).deleteModel(requestParameters.id, requestParameters.xGradientWorkspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fine-tunes the specified model with your data samples.
     * @summary Fine-tune model
     * @param {ModelsApiFineTuneModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public fineTuneModel(requestParameters: ModelsApiFineTuneModelRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).fineTuneModel(requestParameters.id, requestParameters.xGradientWorkspaceId, requestParameters.fineTuneModelBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Describes the specified model, including the model ID, name, and base model ID.
     * @summary Describe model
     * @param {ModelsApiGetModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public getModel(requestParameters: ModelsApiGetModelRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).getModel(requestParameters.id, requestParameters.xGradientWorkspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the currently available models in the selected workspace and provides basic information, such as the model name, ID and whether it is a base or fine-tuned model.
     * @summary List available models
     * @param {ModelsApiListModelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listModels(requestParameters: ModelsApiListModelsRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listModels(requestParameters.xGradientWorkspaceId, requestParameters.onlyBase, options).then((request) => request(this.axios, this.basePath));
    }
}




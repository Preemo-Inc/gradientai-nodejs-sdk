/* tslint:disable */
/* eslint-disable */
/**
 * Gradient AI API
 * Interface for interacting with Gradient AI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gradient.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration";
import type { RequestArgs } from "./base";
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from "./base";
import { existsSync } from "fs";
import { join, parse, resolve } from "path";
import { platform as operatingSystem, version as nodeVersion } from 'process';
import { URL, URLSearchParams } from 'url';

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
    }
}

const findPackageJson = (startPath: string): string | null => {
  let currentDir = startPath;

  while (currentDir && currentDir !== parse(currentDir).root) {
    const possiblePath = join(currentDir, "package.json");

    if (existsSync(possiblePath)) {
      return possiblePath;
    }

    currentDir = resolve(currentDir, "..");
  }

  return null;
}

const readPackageJson = (packageJsonPath: string): any => {
  try {
    return require(packageJsonPath);
  } catch (e) {
    return null;
  }
}

const packageJson = readPackageJson(findPackageJson(__dirname) ?? '');

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        }
        else {
            Object.keys(parameter).forEach(currentKey =>
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)
            );
        }
    }
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        }
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    const { name: packageName, version: packageVersion } = packageJson ?? { name: 'unknown', version: 'unknown' };
    const platform = `NodeJS ${nodeVersion} ${operatingSystem}`;
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...axiosArgs.options,
          url: (configuration?.basePath || basePath) + axiosArgs.url,
          headers: {
            ...(axiosArgs.options?.headers ?? {}),
            'User-Agent': `${packageName} ${packageVersion} (${platform})`,
          }
        };
        return axios.request<T, R>(axiosRequestArgs);
    };
}
